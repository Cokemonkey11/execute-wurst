package Execute
import LinkedList
import LinkedListModule

public tuple maybeInt(bool _has, int val)

function maybeInt.get_or(int default_val) returns int
    if this._has
        return this.val
    else
        return default_val

public enum ExecuteAction
    _DEFAULT
    DASH                // Caster dashes to target.  Synch.  Arg is velocity, default 500 units/second.
    STRIKE              // Caster plays attack animation.  Asynch.  Arg is animation speed, default 1.0
    WAIT                // A delay occurs.  Synch.  Arg is duration in milliseconds, default is 1000 milliseconds.
    ANIMATE             // Animation is played.  Asynch.  Arg is which animation by index, default is 1.
    DAMAGE              // Deals damage to the target.  Asynch.  Arg is damage amount, default is 1.
    CONDITION_DISTANCE  // Breaks if the target is too far away.  Synch.  Arg is distance, default is 100.
    CONDITION_ALIVE     // Breaks if either caster or target is dead.  Synch.  Arg is unused.

public class ExecuteSeq
    ExecuteAction action
    maybeInt arg

    construct(ExecuteAction action, maybeInt arg)
        this.action = action
        this.arg = arg

    construct(ExecuteAction action)
        this.action = action

public class Execute
    use LinkedListModule

    // Default execute sequence. Neither caster nor target are locked, and a
    // pair of dashes occur, each with conditional damage.
    static let default_seq = new LinkedList<ExecuteSeq>()
        ..add(new ExecuteSeq(ExecuteAction.DASH,               maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.STRIKE,             maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.WAIT,               maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.CONDITION_DISTANCE, maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.CONDITION_ALIVE,    maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.DAMAGE,             maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.CONDITION_ALIVE,    maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.DASH,               maybeInt(true,  1000)))
        ..add(new ExecuteSeq(ExecuteAction.CONDITION_ALIVE,    maybeInt(false,    0)))
        ..add(new ExecuteSeq(ExecuteAction.STRIKE,             maybeInt(true,     2)))
        ..add(new ExecuteSeq(ExecuteAction.WAIT,               maybeInt(true,   500)))
        ..add(new ExecuteSeq(ExecuteAction.DAMAGE,             maybeInt(false,    0)))

    unit target
    unit caster
    LinkedList<ExecuteSeq> seq
    ExecuteSeq curentAction = null

    construct(unit caster, unit target)
        this.caster = caster
        this.target = target
        this.seq = default_seq.copy()

    /// Constructs a new Execute, cloning the input sequence.
    construct(unit caster, unit target, LinkedList<ExecuteSeq> sequence)
        this.caster = caster
        this.target = target
        this.seq = sequence.copy()
